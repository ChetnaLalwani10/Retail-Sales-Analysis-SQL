DROP TABLE IF EXISTS RETAIL_SALES;

CREATE TABLE IF NOT EXISTS RETAIL_SALES
( "transactions_id" VARCHAR(100) PRIMARY KEY,
   "sale_date" DATE,
   "sale_time" TIME,
   "customer_id" VARCHAR(100),
   "gender" VARCHAR(100),
   "age" INT,
   "category" VARCHAR(100),
   "quantity" INT,
   "price_per_unit" FLOAT,
   "cogs" FLOAT,
   "total_sale" FLOAT
	);

SELECT * FROM RETAIL_SALES;

-- DATA CLEANING

SELECT COUNT (*)
FROM RETAIL_SALES;

SELECT * 
FROM RETAIL_SALES 
WHERE transactions_id IS NULL 
OR 
sale_date IS NULL
OR 
sale_time IS NULL 
OR 
gender IS NULL 
OR 
category IS NULL 
OR
quantity IS NULL 
OR
price_per_unit IS NULL
OR 
cogs IS NULL
OR 
total_sale IS NULL;

DELETE 
FROM RETAIL_SALES
WHERE transactions_id IS NULL 
OR 
sale_date IS NULL
OR 
sale_time IS NULL 
OR 
gender IS NULL 
OR 
category IS NULL 
OR
quantity IS NULL 
OR
price_per_unit IS NULL
OR 
cogs IS NULL
OR 
total_sale IS NULL;

-- DATA EXPLORATION 

-- NO OF SALES WE HAVE 

SELECT 
COUNT (*)
FROM RETAIL_SALES;

-- NO. OF UNIQUE CUSTOMER WE HAVE 

SELECT COUNT(DISTINCT customer_id) 
FROM RETAIL_SALES;

-- NO OF UNIQUE CATEGORY WE HAVE

SELECT COUNT(DISTINCT category) 
FROM RETAIL_SALES;

-- DATA ANALYSIS OR BUSINESS KEY PROBLEMS

--Q1-- WRITE A SQL QUERY TO RETRIEVE ALL THE COLUMNS FOR SALES MADE ON '2022-11-09'

SELECT *
FROM RETAIL_SALES
WHERE sale_date = '2022-11-09';

--Q2-- WRITE A SQL QUERY TO RETRIVE ALL TRANSACTIONS WHERE THE CATEGORY IS 'COLTHING' AND QUANTITY SOLD IS MORE THAN EQUAL TO 4 IN THE MONTH OF NOV-22

SELECT *  
FROM RETAIL_SALES
WHERE category = 'Clothing'
AND 
quantity >= 4
AND
sale_date > '2022-10-31' 
AND
sale_Date < '2022-12-01';

--Q3-- WRITE A SQL QUERY TO CALCULATE THE TOTAL SALES FOR EACH CATEGORY

SELECT category, SUM(total_sale) AS TOTAL_SALES
FROM RETAIL_SALES
GROUP BY category;

--Q4-- WRITE A SQL QUERY TO FIND THE AVERAGE AGE OF CUSTOMERS WHO PURCHASED ITEM FROM THE BEAUTY CATEGORY

SELECT category, AVG(age) AS AVG_AGE
FROM RETAIL_SALES
WHERE category = 'Beauty'
GROUP BY category

--or 

select round(avg(age),2)
from retail_sales
where category = 'Beauty'


--Q5 -- WRITE A SQL QUERY TO FIND ALL TRANSACTIONS WHERE THE TOTAL_SALES IS GREATER THAN 1000

 SELECT *
 FROM RETAIL_SALES
 WHERE total_Sale>1000;

 --Q6-- WRITE SQL QUERY TO FIND THE TOTAL NO OF TRANSACTIONS MADE BY EACH GENDER IN EACH CATEGORY

 SELECT COUNT(transactions_id), gender, category
 FROM RETAIL_SALES
 GROUP BY gender, category
 ORDER BY category

 -- category pehle likhoge to pehle vo ayegi fr gender


--Q7-- WRITE A SQL QUERY TO CALCULATE THE AVERAGE SALE FOR EACH MONTH. FIND OUR BEST SELLING MONTH IN EACH YEAR


SELECT AVG(total_Sale), year, month
FROM RETAIL_SALES 
GROUP BY sale_date

SELECT * FROM
(
SELECT 
EXTRACT (YEAR FROM sale_Date) AS YEAR,
EXTRACT (MONTH FROM sale_Date) AS MONTH,
AVG(total_sale) AS AVG_SALE,
RANK() OVER(PARTITION BY EXTRACT (YEAR FROM sale_date) ORDER BY AVG(total_sale)  DESC) AS RANK
FROM RETAIL_SALES
GROUP BY 1, 2) AS T1
WHERE RANK = 1

--ORDER BY year, AVG_SALE DESC

--Q8-- WRITE A SQL QUERY TO FIND THE TOP 5 CUSTOMERS BASED ON THE HIGHEST TOTAL SALES

SELECT customer_id, SUM(total_Sale) AS TOTAL_SALE
FROM RETAIL_SALES
GROUP BY customer_id
ORDER BY TOTAL_SALE DESC
LIMIT 5;

--Q9-- WRITE A SQL QUERY TO FIND THE NUMBER OF UNIQUE CUSTOMERS WHO PURCHASED ITEMS FROM EACH CATEGORY

SELECT 
COUNT (DISTINCT customer_id) AS NO_OF_CUSTOMER, 
category
FROM RETAIL_SALES
GROUP BY category

--Q10-- WRITE A SQL QUERY EACH SHIFT AND NUMBER OF ORDERS ( EXAMPLE <=12, AFTERNOON BETWEEN 12 & 17,, EVENING >17)

WITH SHIFT
AS(
SELECT *,
 CASE
 	WHEN EXTRACT(HOUR FROM sale_time) <12 THEN 'MORNING'
	WHEN EXTRACT(HOUR FROM sale_time) BETWEEN 12 AND 17 THEN 'AFTERNOON'
    ELSE 'EVENING'
 END AS SHIFT
FROM RETAIL_SALES
)

SELECT 
COUNT (transactions_id) AS NO_ORDERS,
SHIFT
FROM SHIFT 
GROUP BY SHIFT

--END OF PROJECT
